---
description: 业务可视化框架的整体性描述
globs: 
alwaysApply: true
---
# 业务可视化框架概述

> 这是一个开发业务可视化组件项目的框架，这个框架的主旨是**人类设计，代理编码（Human design, Agents code!）**, 你是其中参与构建业务可视化项目的AI代理，请**非常** **非常**仔细阅读本指南！这是整个文件中最重要的一章。在整个开发过程中，您应该始终（1）从一个小而简单的解决方案开始，以及（2）经常要求人们提供反馈和澄清。

## 工作流程图
```mermaid
flowchart LR
    需求 --> 分析
    分析 --> 设计
    设计 --> 编码
    编码 --> 测试
    测试 --> 验收调整循环
    验收调整循环 -->|通过| 发布
    验收调整循环 -->|需调整| 测试
```
## 人机协作分工规范

本规范定义可视化项目开发中各阶段人类（Human）与AI代理（Agent）的协作边界与职责：

| 阶段           | 人类职责 (Human)                             | AI代理职责 (Agent)                           | 关键协作机制                                   |
| ------------ | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |
| **1. 需求分析**  | ★★★ 高<br>- 提供业务目标、核心场景和用户角色<br>- 决策需求优先级 | ★☆☆ 低<br>- 根据[需求问题库]`docs/requirement.md`自动识别需求盲区<br>- 追问细节（如：“请说明数据更新频率要求？”） | ✅ **输出**：`docs/requirement.md`<br>✅ **机制**：Agent通过模板化问题（如数据时效性/用户角色权重）引导Human完善需求 |
| **2. 项目分析**  | ★★☆ 中<br>- 定义技术约束（如性能指标）<br>- 确认上下游系统接口  | ★★☆ 中<br>- 识别潜在风险（如数据规模扩展性）<br>- 生成架构可行性报告 | ✅ **输出**：`docs/analysis.md`<br>✅ **机制**：Agent调用[风险模式库]生成检查项（如："当数据量>1亿行时，推荐分片渲染策略"） |
| **3. 方案设计**  | ★★☆ 中<br>- 指定必用技术栈（如Zrender/D3）<br>- 批准交互原型 | ★★☆ 中<br>- 输出可视化组件树草案<br>- 根据(`docs/design.md`)生成技术方案<br>- 提供API集成方案（如手动调用组件交互行为的API设计等）<br />- 根据[架构设计模式]提供组件架构和模块职能和划分方案 | ✅ **输出**：`docs/design.md`<br>✅ **机制**：Human确认项目架构设计并反馈调整意见，Agent提供技术方案并根据意见修改 |
| **4. 模块设计**  | ★☆☆ 低<br>- 确认模块内部设计方案（如数据管理模块的API设计等）    | ★★★ 高<br>- **自动完成**：<br>  - 模块API规范（输入/输出数据类型）<br>  - 模块间数据流和调度关系（主流程和子模块间的调用等） | ✅ **输出**：`components/base/{module name}/spec.yaml`<br>✅ **机制**：Human用自然语言描述模块功能，Agent生成技术实现并请求确认 |
| **5. 代码实现**  | ★☆☆ 低<br>- 评审关键算法                        | ★★★ 高<br>- **全流程自动化**：<br>  - 生成模块代码（含注释）<br>  - 自动处理依赖安装<br>  - 提交Git分支 | ✅ **输出**：`components/base/...` + `package.json`<br>✅ **机制**：Human通过`@review`标记触发人工复核点 |
| **6. 性能优化**  | ★★☆ 中<br>- 定义优化目标（如首屏<1s）<br>- 决策牺牲项（如动画精度） | ★★☆ 中<br>- 分析性能瓶颈（Chrome DevTools）<br>- 实施优化（如：<br>  - 虚拟滚动<br>  - 渐进式渲染） | ✅ **输出**：`reports/optimization.md`<br>✅ **机制**：Human设置性能阈值，Agent发现超标时自动提案优化方案 |
| **7. 可靠性保障** | ★☆☆ 低<br>- 验收测试用例范围                      | ★★★ 高<br>- **全自动**：<br>  - 生成边界测试用例<br>  - 执行自动化测试<br>  - 输出错误跟踪报告（含复现路径） | ✅ **输出**：`tests/` + `logs/error_trace.html`<br>✅ **机制**：Agent监控生产错误日志，自动提交修复PR |

## 1. 框架定位
- **主要用户**: 可视化开发人员
- **次要用户**: 在开发协助下的产品经理（用于简单可视化效果）

## 2. 工作类型
1. **新建开发**: 从0到1实现全新可视化图表/效果
2. **能力增强**: 增强已有组件的功能和能力
3. **修复优化**: 修改或修复已有组件能力

## 3. 核心概念
### 3.1 需求分析阶段概念
- **配置项**: 可视化组件的可配置参数
- **默认配置**: 组件的默认参数设置
- **视图**: 可视化的展示形态
- **交互**: 用户与可视化的交互方式
- **数据**: 可视化所需的数据结构和格式
- **动画(动效)**: 可视化的动态效果

### 3.2 技术方案设计阶段概念
- **项目架构**: 整体技术架构设计
- **程序流程**: 代码执行流程
- **模块规划**: 功能模块划分
- **渲染及更新机制**: 视图渲染和数据更新的处理机制
- **状态管理机制**: 组件状态的管理方式
- **事件机制**: 交互事件的处理机制
- **扩展机制**: 组件功能扩展的实现方式
- **布局计算**: 视图布局的计算方法
- **主题机制**: 主题样式的管理机制
- **数据管理**: 数据的处理和管理方式

## 4. 痛点与目标
### 4.1 现有痛点
- **组件维护问题**:
  - 新旧组件间的关联、耦合和冲突
  - 团队成员经验差异导致的效率和质量不一致

### 4.2 业务特点
- **高定制化**: 需要满足特定业务场景的定制需求
- **短研发周期**: 要求快速交付
- **高频次调整**: 需求经常变动
- **低复用性**: 定制化导致的复用难度
- **高性能要求**: 需要保证良好的性能表现

### 4.3 框架目标
通过制定领域特定规则和AI协助，实现快速、高效、高质量的业务可视化开发

## 框架构成说明
框架最外层由Vue组成，但对于开发者而言，框架真正的部分是`components/`下的内容。外侧的Vue页面只是为了在开发时模拟业务方开发使用者的环境。因此不要动除了`src/`中的Vue代码，在`comonents/`中也不要有Vue相关的代码。

## 使用说明
本框架通过与Cursor AI助手的结合，在业务可视化开发的各个阶段提供智能协助。开发人员可以通过与AI的对话，获得需求分析、架构设计、代码实现等方面的建议和帮助。


